diff --git a/node_modules/@nodert-win11-22h2/windows.devices.bluetooth.genericattributeprofile/_nodert_generated.cpp b/node_modules/@nodert-win11-22h2/windows.devices.bluetooth.genericattributeprofile/_nodert_generated.cpp
index 93ef47e..5ad0a0e 100644
--- a/node_modules/@nodert-win11-22h2/windows.devices.bluetooth.genericattributeprofile/_nodert_generated.cpp
+++ b/node_modules/@nodert-win11-22h2/windows.devices.bluetooth.genericattributeprofile/_nodert_generated.cpp
@@ -3263,7 +3263,6 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
             Nan::SetAccessor(localRef->PrototypeTemplate(), Nan::New<String>("protocolError").ToLocalChecked(), ProtocolErrorGetter);
             Nan::SetAccessor(localRef->PrototypeTemplate(), Nan::New<String>("status").ToLocalChecked(), StatusGetter);
             Nan::SetAccessor(localRef->PrototypeTemplate(), Nan::New<String>("subscribedClient").ToLocalChecked(), SubscribedClientGetter);
-            Nan::SetAccessor(localRef->PrototypeTemplate(), Nan::New<String>("bytesSent").ToLocalChecked(), BytesSentGetter);
 
         Local<Object> constructor = Nan::To<Object>(Nan::GetFunction(localRef).ToLocalChecked()).ToLocalChecked();
         Nan::SetMethod(constructor, "castFrom", CastFrom);
@@ -3424,25 +3423,6 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
       }
     }
       
-    static void BytesSentGetter(Local<String> property, const Nan::PropertyCallbackInfo<v8::Value> &info) {
-      HandleScope scope;
-
-      if (!NodeRT::Utils::IsWinRtWrapperOf<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^>(info.This())) {
-        return;
-      }
-
-      GattClientNotificationResult *wrapper = GattClientNotificationResult::Unwrap<GattClientNotificationResult>(info.This());
-
-      try  {
-        unsigned short result = wrapper->_instance->BytesSent;
-        info.GetReturnValue().Set(Nan::New<Integer>(result));
-        return;
-      } catch (Platform::Exception ^exception) {
-        NodeRT::Utils::ThrowWinRtExceptionInJs(exception);
-        return;
-      }
-    }
-      
 
 
     private:
@@ -6207,7 +6187,10 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
 
       GattLocalCharacteristic *wrapper = GattLocalCharacteristic::Unwrap<GattLocalCharacteristic>(info.This());
 
-      ::Windows::Foundation::IAsyncOperation<::Windows::Foundation::Collections::IVectorView<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^>^>^ op;
+      // (acstacey) Port of patch from jasongin noble-uwp project - see below comment
+      // (jasongin) Hand-patched generated code due to NodeRT bug for method overloads having different return types.
+      ::Windows::Foundation::IAsyncOperation<::Windows::Foundation::Collections::IVectorView<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^>^>^ op1 = nullptr;
+      ::Windows::Foundation::IAsyncOperation<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^>^ op2 = nullptr;
 
 
       if (info.Length() == 2
@@ -6217,7 +6200,7 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
         {
           ::Windows::Storage::Streams::IBuffer^ arg0 = dynamic_cast<::Windows::Storage::Streams::IBuffer^>(NodeRT::Utils::GetObjectInstance(info[0]));
           
-          op = wrapper->_instance->NotifyValueAsync(arg0);
+          op1 = wrapper->_instance->NotifyValueAsync(arg0);
         }
         catch (Platform::Exception ^exception)
         {
@@ -6234,7 +6217,7 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
           ::Windows::Storage::Streams::IBuffer^ arg0 = dynamic_cast<::Windows::Storage::Streams::IBuffer^>(NodeRT::Utils::GetObjectInstance(info[0]));
           ::Windows::Devices::Bluetooth::GenericAttributeProfile::GattSubscribedClient^ arg1 = UnwrapGattSubscribedClient(info[1]);
           
-          op = wrapper->_instance->NotifyValueAsync(arg0,arg1);
+          op2 = wrapper->_instance->NotifyValueAsync(arg0,arg1);
         }
         catch (Platform::Exception ^exception)
         {
@@ -6247,9 +6230,10 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
         return;
       }
 
-      auto opTask = create_task(op);
       uv_async_t* asyncToken = NodeUtils::Async::GetAsyncToken(info[info.Length() -1].As<Function>());
 
+      if (op1 != nullptr) {
+      auto opTask = create_task(op1);
       opTask.then( [asyncToken] (task<::Windows::Foundation::Collections::IVectorView<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^>^> t) {
         try {
           auto result = t.get();
@@ -6295,6 +6279,48 @@ namespace NodeRT { namespace Windows { namespace Devices { namespace Bluetooth {
           });
         }
       });
+    } else {
+      auto opTask = create_task(op2);
+      opTask.then( [asyncToken] (task<::Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientNotificationResult^> t) 
+      {	
+        try
+        {
+          auto result = t.get();
+          NodeUtils::Async::RunCallbackOnMain(asyncToken, [result](NodeUtils::InvokeCallbackDelegate invokeCallback) {
+
+            Local<Value> error;
+            Local<Value> arg1;
+            {
+              TryCatch tryCatch;
+              arg1 = WrapGattClientNotificationResult(result);
+              if (tryCatch.HasCaught())
+              {
+                error = Nan::To<Object>(tryCatch.Exception()).ToLocalChecked();
+              }
+              else 
+              {
+                error = Undefined();
+              }
+              if (arg1.IsEmpty()) arg1 = Undefined();
+            }
+            Local<Value> args[] = {error, arg1};
+
+
+            invokeCallback(_countof(args), args);
+          });
+        }
+        catch (Platform::Exception^ exception)
+        {
+          NodeUtils::Async::RunCallbackOnMain(asyncToken, [exception](NodeUtils::InvokeCallbackDelegate invokeCallback) {
+             
+            Local<Value> error = NodeRT::Utils::WinRtExceptionToJsError(exception);
+        
+            Local<Value> args[] = {error};
+            invokeCallback(_countof(args), args);
+          });
+        }  		
+      });
+      }
     }
 
 
